커스텀 훅 사용시 장점
프레젠테이션컴포넌트(단순 UI 표현)와 컨테이너컴포넌트(상태관리, 비즈니스로직) 패턴을 사용할 시,
컨테이너가 프레젠테이션을 포함하고 있고, props로 관리한 상태들과 함수들을 내려줘야 하는데.

우리의 목적 : 비즈니스 로직과 UI를 분리하자!

는 취지에는 맞지만. 컨테이너컴포넌트는 대부분 클라이언트컴포넌트가 될것이고, Next.js 서버컴포넌트를
사용하는 의미가 없어집니다.

컨테이너컴포넌트의 비즈니스로직과 상태관리를 커스텀훅을 사용하여 분리하면, 컨테이너 컴포넌트를 만들 필요가 없기때문에
Next.js의 서버와 클라이언트 컴포넌트를 의미있게 사용할 수 있으며, 필요없는 컴포넌트또한 줄일 수 있습니다.

-------------------------------------------------------------------------------------------

서버컴포넌트와 클라이언트 컴포넌트의 관계

서버컴포넌트를 클라이언트컴포넌트에서 렌더링 할 수 없습니다. 가능은 하지만 서버컴포넌트는 클라이언트컴포넌트로 간주됩니다.
단, 서버컴포넌트를 클라이언트컴포넌트의 children props로 전달하는 것은 가능합니다.
이 경우 서버컴포넌트와 클라이언트컴포넌트는 독립적으로 렌더링될 수 있으며, 서버컴포넌트는 정상적으로 서버에서 렌더링됩니다.


서버컴포넌트 {
    <클라이언트컴포넌트>
}
가능

클라이언트컴포넌트 {
    <서버컴포넌트> //클라이언트컴포넌트로 간주
}
불가능

<클라이언트컴포넌트>
    <서버컴포넌트/>
</클라이언트컴포넌트>
가능



